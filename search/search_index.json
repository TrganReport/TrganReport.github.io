{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Trgan Report","text":"<p>TrganReport is a lightweight, modular automation reporting framework built for speed, scalability, and visual clarity in HTML. Whether you're tracking test outcomes or visualizing domain-specific data, TrganReport delivers structured, branded reports with precision and portability.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li> <p>Ultra-fast generation with near-zero latency</p> </li> <li> <p>Inbuilt lightweight image embedding for reduced file size and offline portability</p> </li> <li> <p>Modular structure with branded UI components</p> </li> <li> <p>Parallel execution support with concurrent container/test creation</p> </li> <li> <p>Offline/online asset resolution</p> </li> <li> <p>Legal hygiene and contributor-friendly documentation</p> </li> </ul>"},{"location":"#report-structure","title":"Report Structure","text":"<p>A typical TrganReport output breaks down into five key sections: </p> <ul> <li>Summary Panel providing high-level test metrics (total, passed, failed, skipped, duration)</li> <li>Metadata containing contextual details such as execution date, environment, mode, executor, and sprint</li> <li>Execution Status table detailing each container or test\u2019s start and end times, duration, and status</li> <li>Execution Outcome(optional) table for visualizing domain-specific results or data mappings</li> <li>Execution Report with nested containers, tests, steps, and logs for full traceability</li> </ul> <p>The main feature of TrganReport is inbuild lightweight image embeding thus reducing the file size making portable efficient, The report can handle concurrent creation of containers and tests can make the parallel execution along with. The report will be generate immediately with extreme low latency with image binding.</p>"},{"location":"#installation","title":"Installation","text":"<p>Install via .NET CLI <pre><code>dotnet add package TrganReport\n</code></pre> For projects that support PackageReference, copy this XML node into the project file to reference the package. <pre><code>&lt;PackageReference Include=\"TrganReport\" Version=\"1.0.0\" /&gt;\n</code></pre> Or download the latest release:</p> <ul> <li>NuGet Package</li> <li>Direct download from GitHub</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Getting Started</li> <li>Tutorial</li> <li>Contributor Guide</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>API Index</li> </ul>"},{"location":"#repository","title":"Repository","text":"<p>Source code and issue tracking are available on GitHub. </p>"},{"location":"#contribute","title":"Contribute","text":"<p>TrganReport is actively evolving to meet the demands of scalable, branded reporting. We welcome contributions across UI enhancements, performance tuning, offline mode, versioning, onboarding guides, cross-platform compatibility, and stress-test rendering.</p>"},{"location":"#license","title":"License","text":"<p>TrganReport is distributed under the MIT License and is free to use, modify, and redistribute.</p> <p>See the full text in the LICENSE file for details and warranty disclaimer</p>"},{"location":"download/","title":"Download","text":""},{"location":"download/#installation","title":"Installation","text":"<p>Install via .NET CLI <pre><code>dotnet add package TrganReport\n</code></pre> Or via Visual Studio:</p> <ol> <li> <p>Right-click your project in Solution Explorer</p> </li> <li> <p>Select Manage NuGet Packages</p> </li> <li> <p>Search for TrganReport and click Install</p> </li> </ol> <p>For projects that support PackageReference, copy this XML node into the project file to reference the package. <pre><code>&lt;PackageReference Include=\"TrganReport\" Version=\"1.0.0\" /&gt;\n</code></pre></p>"},{"location":"download/#releases","title":"Releases","text":"Version NuGet Package v1.0.0 Download <p>Or download the latest release:</p> <ul> <li>NuGet Package</li> <li>Direct download from GitHub</li> </ul>"},{"location":"api/","title":"TrganReport","text":""},{"location":"api/#trganreport_1","title":"TrganReport","text":"<p>TrganContainer</p> <p>TrganHtmlReport</p> <p>TrganStep</p> <p>TrganTest</p>"},{"location":"api/#trganreportconfigs","title":"TrganReport.Configs","text":"<p>ReportConfig</p>"},{"location":"api/#trganreportcore","title":"TrganReport.Core","text":"<p>LogEntry</p> <p>Screenshot</p>"},{"location":"api/#trganreportenums","title":"TrganReport.Enums","text":"<p>Chart</p> <p>GherkinKeyword</p> <p>Status</p> <p>TimeStyle</p>"},{"location":"api/#trganreportmodels","title":"TrganReport.Models","text":"<p>MetaInfo</p> <p>ReportStats</p>"},{"location":"api/#trganreporttable","title":"TrganReport.Table","text":"<p>TrganDynamicRow</p> <p>TrganTable</p>"},{"location":"api/#trganreportutils","title":"TrganReport.Utils","text":"<p>TimeFormatter</p>"},{"location":"api/trganreport.configs.reportconfig/","title":"ReportConfig","text":"<p>Namespace: TrganReport.Configs</p> <p>Centralized configuration for Trgan reports.  Provides unified access to all configurations.</p> <pre><code>public class ReportConfig\n</code></pre> <p>Inheritance Object \u2192 ReportConfig</p>"},{"location":"api/trganreport.configs.reportconfig/#properties","title":"Properties","text":""},{"location":"api/trganreport.configs.reportconfig/#reportheading","title":"ReportHeading","text":"<p>The heading displayed at the top of the report. Default header is \"Automation Report\".</p> <pre><code>public string ReportHeading { get; set; }\n</code></pre>"},{"location":"api/trganreport.configs.reportconfig/#property-value","title":"Property Value","text":"<p>String</p> <p>Remarks:</p> <p>Prefer Uppercase</p>"},{"location":"api/trganreport.configs.reportconfig/#useemojis","title":"UseEmojis","text":"<p>Enables emoji rendering in the meta summary's expanded section of the report. Indicators and visual cues include emojis for enhanced readability.</p> <pre><code>public bool UseEmojis { get; set; }\n</code></pre>"},{"location":"api/trganreport.configs.reportconfig/#property-value_1","title":"Property Value","text":"<p>Boolean</p>"},{"location":"api/trganreport.configs.reportconfig/#showcategory","title":"ShowCategory","text":"<p>Gets or sets a value indicating whether the \"Category\" column should be displayed in Execution Status table.  Default is <code>true</code>.</p> <pre><code>public bool ShowCategory { get; set; }\n</code></pre>"},{"location":"api/trganreport.configs.reportconfig/#property-value_2","title":"Property Value","text":"<p>Boolean</p>"},{"location":"api/trganreport.configs.reportconfig/#showendtime","title":"ShowEndTime","text":"<p>Gets or sets a value indicating whether the \"End Time\" column should be displayed in Execution Status table.  Default is <code>true</code>.</p> <pre><code>public bool ShowEndTime { get; set; }\n</code></pre>"},{"location":"api/trganreport.configs.reportconfig/#property-value_3","title":"Property Value","text":"<p>Boolean</p>"},{"location":"api/trganreport.configs.reportconfig/#showduration","title":"ShowDuration","text":"<p>Gets or sets a value indicating whether the \"Duration\" column should be displayed in Execution Status table.  Default is <code>true</code>.</p> <pre><code>public bool ShowDuration { get; set; }\n</code></pre>"},{"location":"api/trganreport.configs.reportconfig/#property-value_4","title":"Property Value","text":"<p>Boolean</p>"},{"location":"api/trganreport.configs.reportconfig/#timestyle","title":"TimeStyle","text":"<p>Controls how timestamps are formatted throughout the report.  Options include:</p> <pre><code>public TimeStyle TimeStyle { get; set; }\n</code></pre>"},{"location":"api/trganreport.configs.reportconfig/#property-value_5","title":"Property Value","text":"<p>TimeStyle</p>"},{"location":"api/trganreport.configs.reportconfig/#testcharttitle","title":"TestChartTitle","text":"<p>Gets or sets the title for the container-level chart.</p> <pre><code>public string TestChartTitle { get; set; }\n</code></pre>"},{"location":"api/trganreport.configs.reportconfig/#property-value_6","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.configs.reportconfig/#exceptions","title":"Exceptions","text":"<p>ChartConfigurationException Thrown when the title is null, empty, or whitespace.</p>"},{"location":"api/trganreport.configs.reportconfig/#subtestcharttitle","title":"SubTestChartTitle","text":"<p>Gets or sets the title for the test-level chart.</p> <pre><code>public string SubTestChartTitle { get; set; }\n</code></pre>"},{"location":"api/trganreport.configs.reportconfig/#property-value_7","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.configs.reportconfig/#exceptions_1","title":"Exceptions","text":"<p>ChartConfigurationException Thrown when the title is null, empty, or whitespace.</p>"},{"location":"api/trganreport.configs.reportconfig/#stepcharttitle","title":"StepChartTitle","text":"<p>Gets or sets the title for the step-level chart.</p> <pre><code>public string StepChartTitle { get; set; }\n</code></pre>"},{"location":"api/trganreport.configs.reportconfig/#property-value_8","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.configs.reportconfig/#exceptions_2","title":"Exceptions","text":"<p>ChartConfigurationException Thrown when the title is null, empty, or whitespace.</p>"},{"location":"api/trganreport.configs.reportconfig/#imagequality","title":"ImageQuality","text":"<p>Controls the image quality used during screenshot generation.  Throws ScreenshotException if the quality value is outside the valid range (0\u2013100). <pre><code>public long ImageQuality { get; set; }\n</code></pre>"},{"location":"api/trganreport.configs.reportconfig/#property-value_9","title":"Property Value","text":"<p>Int64</p>"},{"location":"api/trganreport.configs.reportconfig/#constructors","title":"Constructors","text":""},{"location":"api/trganreport.configs.reportconfig/#reportconfig_1","title":"ReportConfig()","text":"<pre><code>public ReportConfig()\n</code></pre>"},{"location":"api/trganreport.core.logentry/","title":"LogEntry","text":"<p>Namespace: TrganReport.Core</p> <p>Represents a single log entry for a test step in the report.  Includes a timestamp, message, and screenshot for enhanced traceability.</p> <pre><code>public class LogEntry\n</code></pre> <p>Inheritance Object \u2192 LogEntry</p>"},{"location":"api/trganreport.core.logentry/#constructors","title":"Constructors","text":""},{"location":"api/trganreport.core.logentry/#logentrytrganstep-string-screenshot-boolean","title":"LogEntry(TrganStep, String, Screenshot, Boolean)","text":"<p>Initializes a new instance of the LogEntry class.</p> <pre><code>public LogEntry(TrganStep step, string message, Screenshot image, bool timestamp)\n</code></pre>"},{"location":"api/trganreport.core.logentry/#parameters","title":"Parameters","text":"<p><code>step</code> TrganStep function caller</p> <p><code>message</code> String Optional message describing the log context.</p> <p><code>image</code> Screenshot Optional screenshot to include in the log.</p> <p><code>timestamp</code> Boolean If true, logs the timestamp of the log entry.</p>"},{"location":"api/trganreport.core.screenshot/","title":"Screenshot","text":"<p>Namespace: TrganReport.Core</p> <p>Represents a screenshot artifact that can be embedded in the report.  Supports multiple input formats including Base64 strings, byte arrays, and file paths.  Provides validation and conversion utilities for consistent rendering.</p> <pre><code>public class Screenshot\n</code></pre> <p>Inheritance Object \u2192 Screenshot</p>"},{"location":"api/trganreport.core.screenshot/#properties","title":"Properties","text":""},{"location":"api/trganreport.core.screenshot/#title","title":"Title","text":"<p>Gets the optional description associated with the screenshot.  Used for labeling or annotating the image in the report.</p> <pre><code>public string Title { get; private set; }\n</code></pre>"},{"location":"api/trganreport.core.screenshot/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.core.screenshot/#base64content","title":"Base64Content","text":"<p>Gets the screenshot content as a Base64-encoded string, if provided directly.</p> <pre><code>public string Base64Content { get; set; }\n</code></pre>"},{"location":"api/trganreport.core.screenshot/#property-value_1","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.core.screenshot/#filepath","title":"FilePath","text":"<p>Gets the file path to the screenshot image, if loaded from disk.</p> <pre><code>public string FilePath { get; set; }\n</code></pre>"},{"location":"api/trganreport.core.screenshot/#property-value_2","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.core.screenshot/#bytearray","title":"ByteArray","text":"<p>Gets the screenshot content as a byte array, if provided directly.</p> <pre><code>public Byte[] ByteArray { get; set; }\n</code></pre>"},{"location":"api/trganreport.core.screenshot/#property-value_3","title":"Property Value","text":"<p>Byte[]</p>"},{"location":"api/trganreport.core.screenshot/#methods","title":"Methods","text":""},{"location":"api/trganreport.core.screenshot/#frombase64string-string","title":"FromBase64(String, String)","text":"<p>Creates a screenshot from a Base64 string.</p> <pre><code>public static Screenshot FromBase64(string base64, string description)\n</code></pre>"},{"location":"api/trganreport.core.screenshot/#parameters","title":"Parameters","text":"<p><code>base64</code> String The Base64-encoded image content.</p> <p><code>description</code> String Optional description for the screenshot.</p>"},{"location":"api/trganreport.core.screenshot/#returns","title":"Returns","text":"<p>Screenshot A valid Screenshot instance.</p>"},{"location":"api/trganreport.core.screenshot/#exceptions","title":"Exceptions","text":"<p>ScreenshotException Thrown if the Base64 content is null or whitespace.</p>"},{"location":"api/trganreport.core.screenshot/#frombytesbyte-string","title":"FromBytes(Byte[], String)","text":"<p>Creates a screenshot from a byte array.</p> <pre><code>public static Screenshot FromBytes(Byte[] bytes, string description)\n</code></pre>"},{"location":"api/trganreport.core.screenshot/#parameters_1","title":"Parameters","text":"<p><code>bytes</code> Byte[] The raw image bytes.</p> <p><code>description</code> String Optional description for the screenshot.</p>"},{"location":"api/trganreport.core.screenshot/#returns_1","title":"Returns","text":"<p>Screenshot A valid Screenshot instance.</p>"},{"location":"api/trganreport.core.screenshot/#exceptions_1","title":"Exceptions","text":"<p>ScreenshotException Thrown if the byte array is null or empty.</p>"},{"location":"api/trganreport.core.screenshot/#fromfilestring-string","title":"FromFile(String, String)","text":"<p>Creates a screenshot from a file path.</p> <pre><code>public static Screenshot FromFile(string path, string description)\n</code></pre>"},{"location":"api/trganreport.core.screenshot/#parameters_2","title":"Parameters","text":"<p><code>path</code> String The path to the image file.</p> <p><code>description</code> String Optional description for the screenshot.</p>"},{"location":"api/trganreport.core.screenshot/#returns_2","title":"Returns","text":"<p>Screenshot A valid Screenshot instance.</p>"},{"location":"api/trganreport.core.screenshot/#exceptions_2","title":"Exceptions","text":"<p>FileNotFoundException Thrown if the file does not exist.</p>"},{"location":"api/trganreport.enums.chart/","title":"Chart","text":"<p>Namespace: TrganReport.Enums</p> <p>Represents the type of charts used in TrganReport.</p> <pre><code>public enum Chart\n</code></pre> <p>Inheritance Object \u2192 ValueType \u2192 Enum \u2192 Chart Implements IComparable, ISpanFormattable, IFormattable, IConvertible</p>"},{"location":"api/trganreport.enums.chart/#fields","title":"Fields","text":"Name Value Description Container 1 A top-level container grouping multiple tests. Test 2 An individual test case or unit. Used to represent a single logical test within the report. Step 3 A granular execution step within a test."},{"location":"api/trganreport.enums.gherkinkeyword/","title":"GherkinKeyword","text":"<p>Namespace: TrganReport.Enums</p> <p>Represents Gherkin-style keywords used in behavior-driven development (BDD) scenarios.</p> <pre><code>public enum GherkinKeyword\n</code></pre> <p>Inheritance Object \u2192 ValueType \u2192 Enum \u2192 GherkinKeyword Implements IComparable, ISpanFormattable, IFormattable, IConvertible</p>"},{"location":"api/trganreport.enums.gherkinkeyword/#fields","title":"Fields","text":"Name Value Description None 0 No keyword specified. Used as a default or placeholder. Given 1 Defines the initial context or precondition for a scenario. When 2 Specifies an action or event that triggers behavior. Then 3 Describes the expected outcome or result. And 4 Adds additional steps to the current context, action, or outcome. But 5 Introduces a contrasting or exceptional condition. WildCard 6 Matches any keyword (ie, *)."},{"location":"api/trganreport.enums.status/","title":"Status","text":"<p>Namespace: TrganReport.Enums</p> <p>Represents the execution status of a test, step, or container within TrganReport.</p> <pre><code>public enum Status\n</code></pre> <p>Inheritance Object \u2192 ValueType \u2192 Enum \u2192 Status Implements IComparable, ISpanFormattable, IFormattable, IConvertible</p>"},{"location":"api/trganreport.enums.status/#fields","title":"Fields","text":"Name Value Description NONE 0 No status has been assigned. Placeholder before execution. PASS 1 The container, test or step completed successfully without errors. SKIP 2 The container, test or step was intentionally skipped due to conditional execution or disabled scenarios. FAIL 3 The container, test or step failed due to an error or unmet expectation."},{"location":"api/trganreport.enums.timestyle/","title":"TimeStyle","text":"<p>Namespace: TrganReport.Enums</p> <p>Specifies the format style for rendering DateTime values.</p> <pre><code>public enum TimeStyle\n</code></pre> <p>Inheritance Object \u2192 ValueType \u2192 Enum \u2192 TimeStyle Implements IComparable, ISpanFormattable, IFormattable, IConvertible</p>"},{"location":"api/trganreport.enums.timestyle/#fields","title":"Fields","text":"Name Value Description TimeOnly 0 Shows only the time in 24-hour format with hours, minutes, and seconds. Pattern: \"HH:mm:ss\" DateAndTime 1 Shows the full date followed by the time in 24-hour format. Pattern: \"yyyy-MM-dd HH:mm:ss\" TimeAmPm 2 Shows only the time in 12-hour format with AM/PM designator. Pattern: \"hh:mm:ss tt\""},{"location":"api/trganreport.models.metainfo/","title":"MetaInfo","text":"<p>Namespace: TrganReport.Models</p> <p>Represents metadata associated with a test execution run.  This includes environment details, versioning, and custom fields for enhanced traceability.</p> <pre><code>public sealed class MetaInfo\n</code></pre> <p>Inheritance Object \u2192 MetaInfo</p>"},{"location":"api/trganreport.models.metainfo/#properties","title":"Properties","text":""},{"location":"api/trganreport.models.metainfo/#executor","title":"Executor","text":"<p>The name of the executor or automation agent.</p> <pre><code>public string Executor { get; set; }\n</code></pre>"},{"location":"api/trganreport.models.metainfo/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.models.metainfo/#mode","title":"Mode","text":"<p>The execution mode.</p> <pre><code>public string Mode { get; set; }\n</code></pre>"},{"location":"api/trganreport.models.metainfo/#property-value_1","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.models.metainfo/#date","title":"Date","text":"<p>The date of execution</p> <pre><code>public string Date { get; set; }\n</code></pre>"},{"location":"api/trganreport.models.metainfo/#property-value_2","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.models.metainfo/#sprint","title":"Sprint","text":"<p>The sprint identifier or label associated with the test run.</p> <pre><code>public string Sprint { get; set; }\n</code></pre>"},{"location":"api/trganreport.models.metainfo/#property-value_3","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.models.metainfo/#build","title":"Build","text":"<p>The build number associated with the test run.</p> <pre><code>public string Build { get; set; }\n</code></pre>"},{"location":"api/trganreport.models.metainfo/#property-value_4","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.models.metainfo/#environment","title":"Environment","text":"<p>The execution environment (e.g., QA, Staging, Production).</p> <pre><code>public string Environment { get; set; }\n</code></pre>"},{"location":"api/trganreport.models.metainfo/#property-value_5","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.models.metainfo/#releaseversion","title":"ReleaseVersion","text":"<p>The release version associated with the test run.</p> <pre><code>public string ReleaseVersion { get; set; }\n</code></pre>"},{"location":"api/trganreport.models.metainfo/#property-value_6","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.models.metainfo/#commithash","title":"CommitHash","text":"<p>The commit hash from the vcs.</p> <pre><code>public string CommitHash { get; set; }\n</code></pre>"},{"location":"api/trganreport.models.metainfo/#property-value_7","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.models.metainfo/#branchname","title":"BranchName","text":"<p>The branch name from which the test was executed.</p> <pre><code>public string BranchName { get; set; }\n</code></pre>"},{"location":"api/trganreport.models.metainfo/#property-value_8","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.models.metainfo/#changelogsummary","title":"ChangeLogSummary","text":"<p>A descriptive summary of the changes, including details, messages, or reasons for the current execution.  This information is always attached last in the report for maximum visibility.</p> <pre><code>public string ChangeLogSummary { get; set; }\n</code></pre>"},{"location":"api/trganreport.models.metainfo/#property-value_9","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.models.metainfo/#customfields","title":"CustomFields","text":"<p>Custom metadata fields to be included in the report's meta information section.</p> <pre><code>public Dictionary&lt;string, string&gt; CustomFields { get; set; }\n</code></pre>"},{"location":"api/trganreport.models.metainfo/#property-value_10","title":"Property Value","text":"<p>Dictionary&lt;String, String&gt;</p>"},{"location":"api/trganreport.models.metainfo/#constructors","title":"Constructors","text":""},{"location":"api/trganreport.models.metainfo/#metainfo_1","title":"MetaInfo()","text":"<pre><code>public MetaInfo()\n</code></pre>"},{"location":"api/trganreport.models.reportstats/","title":"ReportStats","text":"<p>Namespace: TrganReport.Models</p> <p>Represents aggregated statistics for a report, including counts of test containers, tests, and steps categorized by status.  Useful for generating summary views, visual indicators, and analytics in the final report.</p> <pre><code>public sealed class ReportStats\n</code></pre> <p>Inheritance Object \u2192 ReportStats</p>"},{"location":"api/trganreport.models.reportstats/#properties","title":"Properties","text":""},{"location":"api/trganreport.models.reportstats/#totaltestcontainers","title":"TotalTestContainers","text":"<p>Total number of test containers executed.</p> <pre><code>public int TotalTestContainers { get; internal set; }\n</code></pre>"},{"location":"api/trganreport.models.reportstats/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"api/trganreport.models.reportstats/#passedtestcontainers","title":"PassedTestContainers","text":"<p>Number of test containers that passed.</p> <pre><code>public int PassedTestContainers { get; internal set; }\n</code></pre>"},{"location":"api/trganreport.models.reportstats/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"api/trganreport.models.reportstats/#failedtestcontainers","title":"FailedTestContainers","text":"<p>Number of test containers that failed.</p> <pre><code>public int FailedTestContainers { get; internal set; }\n</code></pre>"},{"location":"api/trganreport.models.reportstats/#property-value_2","title":"Property Value","text":"<p>Int32</p>"},{"location":"api/trganreport.models.reportstats/#skippedtestcontainers","title":"SkippedTestContainers","text":"<p>Number of test containers that were skipped.</p> <pre><code>public int SkippedTestContainers { get; internal set; }\n</code></pre>"},{"location":"api/trganreport.models.reportstats/#property-value_3","title":"Property Value","text":"<p>Int32</p>"},{"location":"api/trganreport.models.reportstats/#totaltests","title":"TotalTests","text":"<p>Total number of tests executed.</p> <pre><code>public int TotalTests { get; internal set; }\n</code></pre>"},{"location":"api/trganreport.models.reportstats/#property-value_4","title":"Property Value","text":"<p>Int32</p>"},{"location":"api/trganreport.models.reportstats/#passedtests","title":"PassedTests","text":"<p>Number of tests that passed.</p> <pre><code>public int PassedTests { get; internal set; }\n</code></pre>"},{"location":"api/trganreport.models.reportstats/#property-value_5","title":"Property Value","text":"<p>Int32</p>"},{"location":"api/trganreport.models.reportstats/#failedtests","title":"FailedTests","text":"<p>Number of tests that failed.</p> <pre><code>public int FailedTests { get; internal set; }\n</code></pre>"},{"location":"api/trganreport.models.reportstats/#property-value_6","title":"Property Value","text":"<p>Int32</p>"},{"location":"api/trganreport.models.reportstats/#skippedtests","title":"SkippedTests","text":"<p>Number of tests that were skipped.</p> <pre><code>public int SkippedTests { get; internal set; }\n</code></pre>"},{"location":"api/trganreport.models.reportstats/#property-value_7","title":"Property Value","text":"<p>Int32</p>"},{"location":"api/trganreport.models.reportstats/#totalsteps","title":"TotalSteps","text":"<p>Total number of steps executed.</p> <pre><code>public int TotalSteps { get; internal set; }\n</code></pre>"},{"location":"api/trganreport.models.reportstats/#property-value_8","title":"Property Value","text":"<p>Int32</p>"},{"location":"api/trganreport.models.reportstats/#passedsteps","title":"PassedSteps","text":"<p>Number of steps that passed.</p> <pre><code>public int PassedSteps { get; internal set; }\n</code></pre>"},{"location":"api/trganreport.models.reportstats/#property-value_9","title":"Property Value","text":"<p>Int32</p>"},{"location":"api/trganreport.models.reportstats/#failedsteps","title":"FailedSteps","text":"<p>Number of steps that failed.</p> <pre><code>public int FailedSteps { get; internal set; }\n</code></pre>"},{"location":"api/trganreport.models.reportstats/#property-value_10","title":"Property Value","text":"<p>Int32</p>"},{"location":"api/trganreport.models.reportstats/#skippedsteps","title":"SkippedSteps","text":"<p>Number of steps that were skipped.</p> <pre><code>public int SkippedSteps { get; internal set; }\n</code></pre>"},{"location":"api/trganreport.models.reportstats/#property-value_11","title":"Property Value","text":"<p>Int32</p>"},{"location":"api/trganreport.models.reportstats/#constructors","title":"Constructors","text":""},{"location":"api/trganreport.models.reportstats/#reportstats_1","title":"ReportStats()","text":"<pre><code>public ReportStats()\n</code></pre>"},{"location":"api/trganreport.table.trgandynamicrow/","title":"TrganDynamicRow","text":"<p>Namespace: TrganReport.Table</p> <p>Represents a dynamic row in a <code>TrganTable</code>, allowing flexible assignment of column values  using dynamic property syntax (e.g., <code>row.ValueOf.Name = \"Alice\"</code>).</p> <pre><code>public class TrganDynamicRow : System.Dynamic.DynamicObject, System.Dynamic.IDynamicMetaObjectProvider\n</code></pre> <p>Inheritance Object \u2192 DynamicObject \u2192 TrganDynamicRow Implements IDynamicMetaObjectProvider</p>"},{"location":"api/trganreport.table.trgandynamicrow/#properties","title":"Properties","text":""},{"location":"api/trganreport.table.trgandynamicrow/#valueof","title":"ValueOf","text":"<p>Use to set or get column values for the current row instance.</p> <pre><code>var row = trganTable.AddEntry();\nrow.ValueOf.Name = \"Alice\";             // Set value\nvar name = row.ValueOf.Name;            // Get value\n</code></pre> <pre><code>public object ValueOf { get; }\n</code></pre>"},{"location":"api/trganreport.table.trgandynamicrow/#property-value","title":"Property Value","text":"<p>Object</p>"},{"location":"api/trganreport.table.trgandynamicrow/#constructors","title":"Constructors","text":""},{"location":"api/trganreport.table.trgandynamicrow/#trgandynamicrowliststring","title":"TrganDynamicRow(List&lt;String&gt;)","text":"<p>Represents a dynamic row in a <code>TrganTable</code>, allowing flexible assignment of column values  using dynamic property syntax (e.g., <code>row.ValueOf.Name = \"Alice\"</code>).</p> <pre><code>public TrganDynamicRow(List&lt;string&gt; columns)\n</code></pre>"},{"location":"api/trganreport.table.trgandynamicrow/#parameters","title":"Parameters","text":"<p><code>columns</code> List&lt;String&gt;</p>"},{"location":"api/trganreport.table.trgandynamicrow/#methods","title":"Methods","text":""},{"location":"api/trganreport.table.trgandynamicrow/#trysetmembersetmemberbinder-object","title":"TrySetMember(SetMemberBinder, Object)","text":"<p>Overridden method to support dynamic property assignment.</p> <pre><code>public bool TrySetMember(SetMemberBinder binder, object value)\n</code></pre>"},{"location":"api/trganreport.table.trgandynamicrow/#parameters_1","title":"Parameters","text":"<p><code>binder</code> SetMemberBinder The dynamic property being set.</p> <p><code>value</code> Object The value to assign.</p>"},{"location":"api/trganreport.table.trgandynamicrow/#returns","title":"Returns","text":"<p>Boolean <code>true</code> if the assignment was successful.</p>"},{"location":"api/trganreport.table.trgandynamicrow/#exceptions","title":"Exceptions","text":"<p>ArgumentException Thrown if the column name is not defined.</p> <p>Remarks:</p> <p>This method is part of the internal dynamic infrastructure and is not intended for direct use.  Prefer using TrganDynamicRow.ValueOf, to assign values to columns dynamically.</p>"},{"location":"api/trganreport.table.trgandynamicrow/#trygetmembergetmemberbinder-object","title":"TryGetMember(GetMemberBinder, Object&amp;)","text":"<p>Overridden method to support dynamic property retrieval.</p> <pre><code>public bool TryGetMember(GetMemberBinder binder, Object&amp; result)\n</code></pre>"},{"location":"api/trganreport.table.trgandynamicrow/#parameters_2","title":"Parameters","text":"<p><code>binder</code> GetMemberBinder The dynamic property being accessed.</p> <p><code>result</code> Object&amp; The retrieved value, if available.</p>"},{"location":"api/trganreport.table.trgandynamicrow/#returns_1","title":"Returns","text":"<p>Boolean <code>true</code> always, even if the column is not defined.</p> <p>Remarks:</p> <p>This method is part of the internal dynamic infrastructure and is not intended for direct use.  Prefer using TrganDynamicRow.ValueOf to retrieve column values.</p>"},{"location":"api/trganreport.table.trgantable/","title":"TrganTable","text":"<p>Namespace: TrganReport.Table</p> <p>Creates a new table with defined number of columns for storing execution data.</p> <pre><code>public class TrganTable\n</code></pre> <p>Inheritance Object \u2192 TrganTable</p>"},{"location":"api/trganreport.table.trgantable/#constructors","title":"Constructors","text":""},{"location":"api/trganreport.table.trgantable/#trgantableint32","title":"TrganTable(Int32)","text":"<p>Creates a new table with defined number of columns for storing execution data.</p> <pre><code>public TrganTable(int maxColumn)\n</code></pre>"},{"location":"api/trganreport.table.trgantable/#parameters","title":"Parameters","text":"<p><code>maxColumn</code> Int32 Maximum number of columns to be filled</p>"},{"location":"api/trganreport.table.trgantable/#methods","title":"Methods","text":""},{"location":"api/trganreport.table.trgantable/#addcolumnstring","title":"AddColumn(String)","text":"<p>Adds a column to the table.</p> <pre><code>public void AddColumn(string columnName)\n</code></pre>"},{"location":"api/trganreport.table.trgantable/#parameters_1","title":"Parameters","text":"<p><code>columnName</code> String Name of the column to add.</p>"},{"location":"api/trganreport.table.trgantable/#exceptions","title":"Exceptions","text":"<p>InvalidOperationException Thrown if the column limit is reached.</p>"},{"location":"api/trganreport.table.trgantable/#addentry","title":"AddEntry()","text":"<p>Creates a new row entry in the table.</p> <pre><code>public TrganDynamicRow AddEntry()\n</code></pre>"},{"location":"api/trganreport.table.trgantable/#returns","title":"Returns","text":"<p>TrganDynamicRow A row instance to set column values.</p>"},{"location":"api/trganreport.table.trgantable/#gettable","title":"GetTable()","text":"<p>Returns the finalized table as a list of rows.  Each row is a dictionary of column name and value.</p> <pre><code>public IReadOnlyList&lt;Dictionary&lt;string, string&gt;&gt; GetTable()\n</code></pre>"},{"location":"api/trganreport.table.trgantable/#returns_1","title":"Returns","text":"<p>IReadOnlyList&lt;Dictionary&lt;String, String&gt;&gt;</p>"},{"location":"api/trganreport.trgancontainer/","title":"TrganContainer","text":"<p>Namespace: TrganReport</p> <p>Represents a logical container for grouping related test executions.</p> <p>Each container holds a thread-safe list of associated tests.</p> <pre><code>public class TrganContainer\n</code></pre> <p>Inheritance Object \u2192 TrganContainer</p>"},{"location":"api/trganreport.trgancontainer/#properties","title":"Properties","text":""},{"location":"api/trganreport.trgancontainer/#tests","title":"Tests","text":"<p>Gets a read-only list of tests associated with this container.</p> <pre><code>public IReadOnlyList&lt;TrganTest&gt; Tests { get; }\n</code></pre>"},{"location":"api/trganreport.trgancontainer/#property-value","title":"Property Value","text":"<p>IReadOnlyList&lt;TrganTest&gt;</p>"},{"location":"api/trganreport.trgancontainer/#constructors","title":"Constructors","text":""},{"location":"api/trganreport.trgancontainer/#trgancontainertrganhtmlreport-string-string","title":"TrganContainer(TrganHtmlReport, String, String[])","text":"<p>Represents a logical container for grouping related test executions.</p> <p>Each container holds a thread-safe list of associated tests.</p> <pre><code>public TrganContainer(TrganHtmlReport report, string containerName, String[] categories)\n</code></pre>"},{"location":"api/trganreport.trgancontainer/#parameters","title":"Parameters","text":"<p><code>report</code> TrganHtmlReport Function Caller</p> <p><code>containerName</code> String The name of the container. In BDD, this is the feature name; in TDD, it's the test class name.</p> <p><code>categories</code> String[] Optional categories or tags used to classify the container.  These may represent modules, priorities, or custom labels.</p>"},{"location":"api/trganreport.trgancontainer/#methods","title":"Methods","text":""},{"location":"api/trganreport.trgancontainer/#createteststring","title":"CreateTest(String)","text":"<p>Creates and adds a new Test to the container.  Thread-safe operation that links the test to the container.</p> <pre><code>public TrganTest CreateTest(string name)\n</code></pre>"},{"location":"api/trganreport.trgancontainer/#parameters_1","title":"Parameters","text":"<p><code>name</code> String The name of the test.</p>"},{"location":"api/trganreport.trgancontainer/#returns","title":"Returns","text":"<p>TrganTest A new TrganTest instance.</p>"},{"location":"api/trganreport.trganhtmlreport/","title":"TrganHtmlReport","text":"<p>Namespace: TrganReport</p> <p>Class for building and generating Trgan reports.  Primary entry point for constructing structured execution reports.</p> <pre><code>public class TrganHtmlReport\n</code></pre> <p>Inheritance Object \u2192 TrganHtmlReport</p>"},{"location":"api/trganreport.trganhtmlreport/#properties","title":"Properties","text":""},{"location":"api/trganreport.trganhtmlreport/#reportstats","title":"ReportStats","text":"<p>Represents aggregated statistics for a report, including counts of test containers, tests, and steps categorized by status.  Useful for generating summary views, visual indicators, and analytics in the final report.</p> <pre><code>public ReportStats ReportStats { get; }\n</code></pre>"},{"location":"api/trganreport.trganhtmlreport/#property-value","title":"Property Value","text":"<p>ReportStats</p>"},{"location":"api/trganreport.trganhtmlreport/#config","title":"Config","text":"<p>Centralized configuration for Trgan reports.  Provides unified access to all configurations.</p> <pre><code>public ReportConfig Config { get; }\n</code></pre>"},{"location":"api/trganreport.trganhtmlreport/#property-value_1","title":"Property Value","text":"<p>ReportConfig</p>"},{"location":"api/trganreport.trganhtmlreport/#metainfo","title":"MetaInfo","text":"<p>Metadata section for the report, including author, environment, and custom fields.</p> <pre><code>public MetaInfo MetaInfo { get; }\n</code></pre>"},{"location":"api/trganreport.trganhtmlreport/#property-value_2","title":"Property Value","text":"<p>MetaInfo</p>"},{"location":"api/trganreport.trganhtmlreport/#reportstarttime","title":"ReportStartTime","text":"<p>Gets the timestamp when the report was instantiated.</p> <pre><code>public DateTime ReportStartTime { get; }\n</code></pre>"},{"location":"api/trganreport.trganhtmlreport/#property-value_3","title":"Property Value","text":"<p>DateTime</p>"},{"location":"api/trganreport.trganhtmlreport/#outputpath","title":"OutputPath","text":"<p>Gets the output file path for the Trgan report set during initialization.</p> <pre><code>public string OutputPath { get; private set; }\n</code></pre>"},{"location":"api/trganreport.trganhtmlreport/#property-value_4","title":"Property Value","text":"<p>String</p>"},{"location":"api/trganreport.trganhtmlreport/#trgancontainers","title":"TrganContainers","text":"<p>Gets a read-only list of all containers currently present in the report.</p> <pre><code>public IReadOnlyList&lt;TrganContainer&gt; TrganContainers { get; }\n</code></pre>"},{"location":"api/trganreport.trganhtmlreport/#property-value_5","title":"Property Value","text":"<p>IReadOnlyList&lt;TrganContainer&gt;</p>"},{"location":"api/trganreport.trganhtmlreport/#constructors","title":"Constructors","text":""},{"location":"api/trganreport.trganhtmlreport/#trganhtmlreportstring","title":"TrganHtmlReport(String)","text":"<p>Initializes a new instance of the TrganHtmlReport class with the specified output path.</p> <pre><code>public TrganHtmlReport(string outputPath)\n</code></pre>"},{"location":"api/trganreport.trganhtmlreport/#parameters","title":"Parameters","text":"<p><code>outputPath</code> String The full file path where the report will be generated.</p>"},{"location":"api/trganreport.trganhtmlreport/#methods","title":"Methods","text":""},{"location":"api/trganreport.trganhtmlreport/#trgantableint32","title":"TrganTable(Int32)","text":"<p>Initializes and enables the Trgan table layout with the specified column count.</p> <pre><code>public TrganTable TrganTable(int columnCount)\n</code></pre>"},{"location":"api/trganreport.trganhtmlreport/#parameters_1","title":"Parameters","text":"<p><code>columnCount</code> Int32 Number of columns in the table.</p>"},{"location":"api/trganreport.trganhtmlreport/#returns","title":"Returns","text":"<p>TrganTable A new TrganHtmlReport.TrganTable(Int32) instance.</p>"},{"location":"api/trganreport.trganhtmlreport/#createcontainerstring-string","title":"CreateContainer(String, String[])","text":"<p>Creates a named container to group related tests.</p> <pre><code>public TrganContainer CreateContainer(string name, String[] categories)\n</code></pre>"},{"location":"api/trganreport.trganhtmlreport/#parameters_2","title":"Parameters","text":"<p><code>name</code> String The name of the container.</p> <p><code>categories</code> String[] Categories or tag names</p>"},{"location":"api/trganreport.trganhtmlreport/#returns_1","title":"Returns","text":"<p>TrganContainer A new TrganContainer instance.</p>"},{"location":"api/trganreport.trganhtmlreport/#createteststring-string","title":"CreateTest(String, String[])","text":"<p>Creates a test directly to the report without any TrganContainers.   Useful when the report needs to be in scenario/test basis, instead of feature/testclass basis.    For structured reports that follow a Feature \u2192 Scenarios hierarchy (e.g., BDD or class-based TDD),  use TrganContainer.CreateTest(String)</p> <pre><code>public TrganTest CreateTest(string testName, String[] categories)\n</code></pre>"},{"location":"api/trganreport.trganhtmlreport/#parameters_3","title":"Parameters","text":"<p><code>testName</code> String The name of the test.</p> <p><code>categories</code> String[] Optional categories or tag names for the test.</p>"},{"location":"api/trganreport.trganhtmlreport/#returns_2","title":"Returns","text":"<p>TrganTest A new TrganTest instance.</p>"},{"location":"api/trganreport.trganhtmlreport/#generate","title":"Generate()","text":"<p>Generates the final Trgan Report file.</p> <pre><code>public void Generate()\n</code></pre>"},{"location":"api/trganreport.trganstep/","title":"TrganStep","text":"<p>Namespace: TrganReport</p> <p>Represents a single step within a Trgan test. Captures   logs, status, and screenshots.</p> <pre><code>public class TrganStep\n</code></pre> <p>Inheritance Object \u2192 TrganStep</p>"},{"location":"api/trganreport.trganstep/#constructors","title":"Constructors","text":""},{"location":"api/trganreport.trganstep/#trgansteptrgantest","title":"TrganStep(TrganTest)","text":"<p>Initializes a step with a reference to the parent test.</p> <pre><code>public TrganStep(TrganTest test)\n</code></pre>"},{"location":"api/trganreport.trganstep/#parameters","title":"Parameters","text":"<p><code>test</code> TrganTest The parent TrganTest instance.</p>"},{"location":"api/trganreport.trganstep/#trganstepgherkinkeyword-trgantest","title":"TrganStep(GherkinKeyword, TrganTest)","text":"<p>Initializes a step with a Gherkin keyword and a parent test.</p> <pre><code>public TrganStep(GherkinKeyword keyword, TrganTest test)\n</code></pre>"},{"location":"api/trganreport.trganstep/#parameters_1","title":"Parameters","text":"<p><code>keyword</code> GherkinKeyword The Gherkin keyword (e.g., Given, When, Then).</p> <p><code>test</code> TrganTest The parent TrganTest instance.</p>"},{"location":"api/trganreport.trganstep/#methods","title":"Methods","text":""},{"location":"api/trganreport.trganstep/#logstatus-string-screenshot","title":"Log(Status, String, Screenshot)","text":"<p>Logs the status and optional screenshot for the step.  Also updates the parent test's status and end time.</p> <pre><code>public void Log(Status status, string message, Screenshot screenshot)\n</code></pre>"},{"location":"api/trganreport.trganstep/#parameters_2","title":"Parameters","text":"<p><code>status</code> Status The status to log.</p> <p><code>message</code> String An optional write log message</p> <p><code>screenshot</code> Screenshot An optional screenshot.</p>"},{"location":"api/trganreport.trganstep/#writestring-screenshot-boolean","title":"Write(String, Screenshot, Boolean)","text":"<p>Writes a log entry with optional screenshot and timestamp.  Also updates the parent test's end time.</p> <pre><code>public void Write(string message, Screenshot screenshot, bool timeStamp)\n</code></pre>"},{"location":"api/trganreport.trganstep/#parameters_3","title":"Parameters","text":"<p><code>message</code> String The log message.</p> <p><code>screenshot</code> Screenshot An optional screenshot.</p> <p><code>timeStamp</code> Boolean Whether to include a timestamp in the log.</p>"},{"location":"api/trganreport.trganstep/#passstring-screenshot","title":"Pass(String, Screenshot)","text":"<p>Logs a passing status with an optional screenshot.</p> <pre><code>public void Pass(string message, Screenshot screenshot)\n</code></pre>"},{"location":"api/trganreport.trganstep/#parameters_4","title":"Parameters","text":"<p><code>message</code> String An optional write log message</p> <p><code>screenshot</code> Screenshot An optional screenshot to attach.</p>"},{"location":"api/trganreport.trganstep/#failstring-screenshot","title":"Fail(String, Screenshot)","text":"<p>Logs a failing status with an optional screenshot.</p> <pre><code>public void Fail(string message, Screenshot screenshot)\n</code></pre>"},{"location":"api/trganreport.trganstep/#parameters_5","title":"Parameters","text":"<p><code>message</code> String An optional write log message</p> <p><code>screenshot</code> Screenshot An optional screenshot to attach.</p>"},{"location":"api/trganreport.trganstep/#skipstring-screenshot","title":"Skip(String, Screenshot)","text":"<p>Logs a skipped status with an optional screenshot.</p> <pre><code>public void Skip(string message, Screenshot screenshot)\n</code></pre>"},{"location":"api/trganreport.trganstep/#parameters_6","title":"Parameters","text":"<p><code>message</code> String An optional write log message</p> <p><code>screenshot</code> Screenshot An optional screenshot to attach.</p>"},{"location":"api/trganreport.trgantest/","title":"TrganTest","text":"<p>Namespace: TrganReport</p> <p>Represents a single test case within a report.  Encapsulates metadata, execution timing, status, and associated steps.</p> <pre><code>public class TrganTest\n</code></pre> <p>Inheritance Object \u2192 TrganTest</p>"},{"location":"api/trganreport.trgantest/#constructors","title":"Constructors","text":""},{"location":"api/trganreport.trgantest/#trgantesttrgancontainer-string-string","title":"TrganTest(TrganContainer, String, String[])","text":"<p>Represents a single test case within a report.  Encapsulates metadata, execution timing, status, and associated steps.</p> <pre><code>public TrganTest(TrganContainer container, string trgantestName, String[] categories)\n</code></pre>"},{"location":"api/trganreport.trgantest/#parameters","title":"Parameters","text":"<p><code>container</code> TrganContainer Parent execution container</p> <p><code>trgantestName</code> String The name of the test case.</p> <p><code>categories</code> String[] Optional categories or tags associated with the test.</p>"},{"location":"api/trganreport.trgantest/#methods","title":"Methods","text":""},{"location":"api/trganreport.trgantest/#createstepstring","title":"CreateStep(String)","text":"<p>Creates a new step.</p> <pre><code>public TrganStep CreateStep(string description)\n</code></pre>"},{"location":"api/trganreport.trgantest/#parameters_1","title":"Parameters","text":"<p><code>description</code> String The step description.</p>"},{"location":"api/trganreport.trgantest/#returns","title":"Returns","text":"<p>TrganStep The created TrganStep.</p>"},{"location":"api/trganreport.trgantest/#createstepgherkinkeyword-string","title":"CreateStep(GherkinKeyword, String)","text":"<p>Creates a new step with a specific Gherkin keyword.</p> <pre><code>public TrganStep CreateStep(GherkinKeyword keyword, string description)\n</code></pre>"},{"location":"api/trganreport.trgantest/#parameters_2","title":"Parameters","text":"<p><code>keyword</code> GherkinKeyword The Gherkin keyword (e.g., Given, When, Then).</p> <p><code>description</code> String The step description.</p>"},{"location":"api/trganreport.trgantest/#returns_1","title":"Returns","text":"<p>TrganStep The created TrganStep.</p>"},{"location":"api/trganreport.trgantest/#addstepstatus-string-screenshot","title":"AddStep(Status, String, Screenshot)","text":"<p>Adds a new step with status, message, and optional screenshot.</p> <pre><code>public void AddStep(Status status, string message, Screenshot screenshot)\n</code></pre>"},{"location":"api/trganreport.trgantest/#parameters_3","title":"Parameters","text":"<p><code>status</code> Status The step status.</p> <p><code>message</code> String The step message.</p> <p><code>screenshot</code> Screenshot Optional screenshot for the step.</p>"},{"location":"api/trganreport.trgantest/#addstepstatus-gherkinkeyword-string-screenshot","title":"AddStep(Status, GherkinKeyword, String, Screenshot)","text":"<p>Adds a new step with status, gherkin keyword, message, and optional screenshot.</p> <pre><code>public void AddStep(Status status, GherkinKeyword gherkin, string message, Screenshot screenshot)\n</code></pre>"},{"location":"api/trganreport.trgantest/#parameters_4","title":"Parameters","text":"<p><code>status</code> Status</p> <p><code>gherkin</code> GherkinKeyword</p> <p><code>message</code> String</p> <p><code>screenshot</code> Screenshot</p>"},{"location":"api/trganreport.trgantest/#logstatus","title":"Log(Status)","text":"<p>Mark the test status with given</p> <pre><code>public void Log(Status status)\n</code></pre>"},{"location":"api/trganreport.trgantest/#parameters_5","title":"Parameters","text":"<p><code>status</code> Status</p>"},{"location":"api/trganreport.trgantest/#pass","title":"Pass()","text":"<p>Marks the test as PASS</p> <pre><code>public void Pass()\n</code></pre>"},{"location":"api/trganreport.trgantest/#fail","title":"Fail()","text":"<p>Marks the test as FAIL</p> <pre><code>public void Fail()\n</code></pre>"},{"location":"api/trganreport.trgantest/#skip","title":"Skip()","text":"<p>Marks the test as SKIP</p> <pre><code>public void Skip()\n</code></pre>"},{"location":"api/trganreport.trgantest/#logstatus-string-screenshot","title":"Log(Status, String, Screenshot)","text":"<p>Logs a new step with status, message, and optional screenshot.</p> <pre><code>public void Log(Status status, string message, Screenshot screenshot)\n</code></pre>"},{"location":"api/trganreport.trgantest/#parameters_6","title":"Parameters","text":"<p><code>status</code> Status The step status.</p> <p><code>message</code> String The step message.</p> <p><code>screenshot</code> Screenshot Optional screenshot.</p>"},{"location":"api/trganreport.trgantest/#passstring-screenshot","title":"Pass(String, Screenshot)","text":"<p>Logs a new passing step with the specified message and optional screenshot.</p> <pre><code>public void Pass(string message, Screenshot screenshot)\n</code></pre>"},{"location":"api/trganreport.trgantest/#parameters_7","title":"Parameters","text":"<p><code>message</code> String The message describing the successful step.</p> <p><code>screenshot</code> Screenshot An optional screenshot to attach to the step.</p>"},{"location":"api/trganreport.trgantest/#failstring-screenshot","title":"Fail(String, Screenshot)","text":"<p>Logs a new failing step with the specified message and optional screenshot.</p> <pre><code>public void Fail(string message, Screenshot screenshot)\n</code></pre>"},{"location":"api/trganreport.trgantest/#parameters_8","title":"Parameters","text":"<p><code>message</code> String The message describing the failure.</p> <p><code>screenshot</code> Screenshot An optional screenshot to attach to the step.</p>"},{"location":"api/trganreport.trgantest/#skipstring-screenshot","title":"Skip(String, Screenshot)","text":"<p>Logs a new skipped step with the specified message and optional screenshot.</p> <pre><code>public void Skip(string message, Screenshot screenshot)\n</code></pre>"},{"location":"api/trganreport.trgantest/#parameters_9","title":"Parameters","text":"<p><code>message</code> String The message explaining why the step was skipped.</p> <p><code>screenshot</code> Screenshot An optional screenshot to attach to the step.</p>"},{"location":"api/trganreport.utils.timeformatter/","title":"TimeFormatter","text":"<p>Namespace: TrganReport.Utils</p> <p>Provides a human-readable formatting utility for TimeSpan values.  Converts durations into compact strings like \"999ms\" or \"12h 59m 59s\".</p> <pre><code>public static class TimeFormatter\n</code></pre> <p>Inheritance Object \u2192 TimeFormatter</p>"},{"location":"api/trganreport.utils.timeformatter/#methods","title":"Methods","text":""},{"location":"api/trganreport.utils.timeformatter/#formattimespan","title":"Format(TimeSpan)","text":"<p>Formats a TimeSpan into a readable string.</p> <pre><code>public static string Format(TimeSpan duration)\n</code></pre>"},{"location":"api/trganreport.utils.timeformatter/#parameters","title":"Parameters","text":"<p><code>duration</code> TimeSpan The duration to format.</p>"},{"location":"api/trganreport.utils.timeformatter/#returns","title":"Returns","text":"<p>String A formatted string representing the duration.</p>"},{"location":"documentation/getting-started/","title":"Getting Started","text":"<p>This guide walks you through installing TrganReport, creating your first report, organizing tests into containers, and generating a polished HTML output. A typical test flow includes initialization, grouping, execution, and final rendering. Read on to explore each step in detail.</p>"},{"location":"documentation/getting-started/#installation","title":"Installation","text":"<p>Install via NuGet, <pre><code>dotnet add package TrganReport\n</code></pre> Or download the latest release:</p> <ul> <li>Nugget Package</li> <li>Direct download form GitHub</li> </ul>"},{"location":"documentation/getting-started/#1-initialize-a-report","title":"1. Initialize a Report","text":"<p>Import the namespace and create a new <code>TrganHtmlReport</code> instance, specifying the output path:</p> <pre><code>using TrganReport;\n\nTrganHtmlReport report = new TrganHtmlReport(\"reports/TrganReport.html\");\n</code></pre>"},{"location":"documentation/getting-started/#2-organize-tests-using-trgancontainer","title":"2. Organize Tests using TrganContainer","text":"<p>Use <code>TrganContainer</code> to group related test cases for clarity and modularity:</p> <pre><code>TrganContainer container = report.CreateContainer(name: \"Login Tests\");\n</code></pre>"},{"location":"documentation/getting-started/#3-add-tests-using-trgantest","title":"3. Add Tests using TrganTest","text":"<p>Attach tests to a container using <code>TrganTest</code>:</p> <pre><code>TrganTest test = container.CreateTest(name: \"Valid Login\");\n</code></pre>"},{"location":"documentation/getting-started/#4-update-test-status","title":"4. Update Test Status","text":"<p>Mark test outcomes using status methods: <pre><code>test.Pass(\"pass message\");\n</code></pre></p>"},{"location":"documentation/getting-started/#5-generate-the-report","title":"5. Generate the Report","text":"<p>Once all containers and tests are defined and updated, finalize the report:</p> <p><pre><code>report.Generate();\n</code></pre> This will emit a fully styled HTML file at the specified location.</p> <p>Continue to the next page to explore advanced features.</p>"},{"location":"documentation/logging/","title":"Writting Logs","text":"<p>The <code>Write()</code> method enables fine-grained logging within a TrganStep, making it ideal for capturing intermediate assertions, sub-checkpoints, or debug breadcrumbs during test execution. It supports optional timestamping for chronological clarity and allows attaching contextual screenshots to enhance traceability.</p> <p>Each log entry is recorded as a <code>LogEntry</code> object and automatically updates the parent test\u2019s EndTime, ensuring accurate duration tracking.</p> <pre><code>step.Write(\"Verified input field is visible\");\nstep.Write(\"Entered username\", screenshot);\nstep.Write(\"Submitted form\", timeStamp: false);\nstep.Write(\"Filling Success\", screenshot, false);\n</code></pre> <p>Note</p> <p>AddStep() is designed for streamlined step creation and finalization in a single call\u2014it does not support Write(), as the step is considered complete upon creation.</p>"},{"location":"documentation/screenshot/","title":"Screenshot","text":"<p>The <code>Screenshot</code> class lets you include images in your report. It supports multiple input formats \u2014 Base64 strings, raw byte arrays, and file paths\u2014making it flexible. Each factory method (FromBase64, FromBytes, and FromFile) includes built-in validation to ensure consistent rendering and prevent malformed inputs. Optional title can be attached to screenshots for semantic clarity.</p>"},{"location":"documentation/screenshot/#screenshot-conversion","title":"Screenshot Conversion","text":"<p>You can convert selenium native screenshot output into a TrganReport Screenshot object using one of the following methods,</p> <pre><code>using Screenshot = TrganReport.Core.Screenshot;\n\n// Capture screenshot from selenium\nvar media = ((ITakesScreenshot)WebDriver).GetScreenshot();\n\nScreenshot img = Screenshot.FromBytes(media.AsByteArray, \"title\");\n\nScreenshot img = Screenshot.FromBase64(media.AsBase64EncodedString, \"title\");\n\nmedia.SaveAsFile(\"filePath\");\nScreenshot img = Screenshot.FromBytes(\"filePath\", \"title\");\n</code></pre> <p>Tip</p> <p>In version 1.0.0, screenshots generated via Screenshot.FromBase64() may result in slightly larger file sizes compared to the other two methods. This is because no image optimization is applied, and the image is rendered at full original quality. For finer control over image compression and reduced file size, consider using Screenshot.FromBytes() instead.</p>"},{"location":"documentation/trgan-container/","title":"Trgan Container","text":"<p>TrganContainer is a logical grouping construct within the TrganReport, designed to encapsulate related test executions under a unified module. It enables hierarchical organization and modular rendering of test results, supporting both BDD and TDD paradigms. It supports concurrent creation for parallel execution, allowing scalable test flows while maintaining clarity and modularity in report presentation.</p> <p><pre><code>TrganContainer container = report.CreateContainer(\"containerName\");\n</code></pre> An optional parameter <code>categories:string[]</code> can be passed to label tags or categories used to classify the container. These can can be visible in Execution Status section in the Trgan Table.</p>"},{"location":"documentation/trgan-container/#purpose-of-trgan-container","title":"Purpose of Trgan Container","text":"<ul> <li>BDD-style testing: Represents a Feature, grouping multiple Scenarios under a shared behavioral context.</li> <li>TDD-style testing: Maps to a Test Class, organizing related test methods within a common unit.</li> </ul> <p>This abstraction allows, clear nesting of test results in the final report, thread-safe aggregation of sub-tests modular rendering with collapsible sections and scoped metadata</p>"},{"location":"documentation/trgan-step/","title":"Test Steps","text":"<p>Test steps are created using the TrganStep class within a TrganTest context. Each step represents a distinct action or checkpoint in the test flow and serves as a structured unit for logging execution status. The TrganStep object exposes intuitive methods\u2014Pass(), Fail(), Skip(), and Log()\u2014to record outcomes and annotate progress. This approach ensures consistent reporting, improves traceability, and enhances readability across test suites.</p>"},{"location":"documentation/trgan-step/#creating-a-trgan-step","title":"Creating a Trgan Step","text":"<p>You can create a step using the CreateStep method from TrganTest obj, which initializes the step instance and allows you to update its details later. Alternatively, use AddStep to create and log the step with all required data in a single call. <pre><code>GherkinKeyword gherkin = GherkinKeyword.Given;\nstring description = \"User clicks login\";\n\n// Create a generic step\nvar step = trganTest.CreateStep(description);\n\n// Create a BDD-style step\nvar step = trganTest.CreateStep(gherkin, description); \n</code></pre> After executing the test logic, you can log the result of the step using one of the following methods: <pre><code>step.Pass(description);\nstep.Fail(description);\nstep.Skip(description);\nstep.Log(status, description); \n</code></pre> All four methods accept an optional Screenshot parameter, which embeds the image directly into the HTML report. See the Screenshot section for details.</p> <p>AddStep() provides a streamlined way to create and log a TrganStep in a single call, eliminating the need for separate instantiation and status assignment. This method is particularly effective for concise test flows and supports both generic and BDD-style steps, allowing you to pass a GherkinKeyword for semantic clarity. </p> <p><pre><code>GherkinKeyword gherkin = GherkinKeyword.Given;\nstring description = \"User clicks login\";\nStatus status = Status.PASS;\n\n// Create a generic step\nvar step = AddStep(status, description);\n\n// Create a BDD step\nvar step = AddStep(status, gherkin, description);\n</code></pre> The timespan of the step when created using AddStep is calculated as follows,</p> <ul> <li>if it is the first step under a TrganTest, the duration spans from the test\u2019s creation time to the current step\u2019s end time.</li> <li>otherwise, it spans from the previous step\u2019s end time to the current one.</li> </ul> <p>Info</p> <p>If a TrganTest contains multiple steps with varying statuses, its overall status will reflect the highest severity among them.</p>"},{"location":"documentation/trgan-table/","title":"TrganTable","text":"<p>TrganTable enables you to define a structured, column-based table within a Trgan Report. It\u2019s designed to capture execution outcomes for targeted use cases, making it easier to organize result data. Instantiating the TrganTable, <pre><code>//Define the maximum number of columns required\nvar trganTable = trgan.TrganTable(columnCount : 3);\n</code></pre></p>"},{"location":"documentation/trgan-table/#add-columns","title":"Add Columns","text":"<p>Columns can be added to the Trgan Table by calling AddColumn function, which takes a string parameter as column name. Any number of columns can be created but it should not exceeds the count of columns defined during trgan table initialization and unfilled column slots are ignored. <pre><code>// Define the column names\ntrganTable.AddColumn(\"colName1\");\ntrganTable.AddColumn(\"colName2\");\ntrganTable.AddColumn(\"colName3\");\n</code></pre></p>"},{"location":"documentation/trgan-table/#add-row-entries","title":"Add Row Entries","text":"<p>Use AddEntry() to create a new row and then assign values using dynamic property syntax: <pre><code>// Create new row\nvar row = table.AddEntry();\n\n// Add values to the created row\nrow.ValueOf.Name = \"Alice\";\nrow.ValueOf.Age = \"12\";\nrow.ValueOf.Class = \"7A\"; \n</code></pre></p> <p>Note</p> <p>Column names must be added before adding entries. Each row supports dynamic assignment using ValueOf. Unassigned columns will default to empty strings.</p>"},{"location":"documentation/trgan-test/","title":"Trgan Test","text":"<p>TrganTest represents an individual test case within the trgan report. It can be created independently or nested inside a TrganContainer, depending on the desired report structure.</p>"},{"location":"documentation/trgan-test/#standalone-tests","title":"Standalone Tests","text":"<p>When modular grouping is not required, you can create a test directly on the report. This is ideal for flat reports that follow a scenario/test basis rather than a feature/test class hierarchy.</p> <p><pre><code>TrganTest test = trgan.CreateTest(\"Login with valid credentials\");\n</code></pre> You may optionally pass <code>categories: string[]</code> to tag the test with labels. <pre><code>string[] categories = { \"Login\", \"Smoke\", \"Critical\" };\nTrganTest test = trgan.CreateTest(\"Login with valid credentials\", categories); \n</code></pre></p>"},{"location":"documentation/trgan-test/#container-based-tests","title":"Container-Based Tests","text":"<p>For structured reports that follow a Feature \u2192 Scenarios hierarchy (e.g., BDD or class-based TDD), use <code>TrganContainer.CreateTest</code> to nest the test inside a logical grouping.</p> <p><pre><code>TrganContainer container = trgan.CreateContainer(\"Login Feature\");\n\nTrganTest trganTest = container.CreateTest(\"Login with valid credentials\");  \n</code></pre> This approach enables hierarchical rendering, improved visual grouping within the report.</p> <p>Note</p> <p>When creating a TrganTest via TrganContainer, category tags cannot be passed directly to the test. Instead, they are inherited and validated through the associated TrganContainer.</p> <p>Example: <pre><code>TrganContainer container = trgan.CreateContainer(\"Login Feature\");\n\nTrganTest trganTest1 = container.CreateTest(\"Login with valid credentials\");\nTrganTest trganTest2 = container.CreateTest(\"Login with invalid credentials\");\nTrganTest trganTest3 = container.CreateTest(\"Login with valid old credentials\");\n</code></pre> all three trganTests are created under same TrganContainer object.</p>"},{"location":"documentation/tutorial/","title":"Trgan Report Csharp Tutorial","text":"<p>This guide walks through all the core features TrganReport provides for generating modular, branded HTML reports in C#.</p>"},{"location":"documentation/tutorial/#create-and-generate-report","title":"Create and Generate Report","text":"<p>To get started, install TrganReport via Visual Studio\u2019s NuGet package manager or by adding the following to your <code>.csproj</code> file: <pre><code>&lt;ItemGroup&gt;\n    &lt;PackageReference Include=\"TrganReport\" Version=\"1.0.0\" /&gt;\n&lt;/ItemGroup&gt;\n</code></pre> Then import the package:</p> <pre><code>using TrganReport;\n</code></pre> <p>Initialize a report by creating a TrganHtmlReport object and specifying the output path and filename:</p> <pre><code>TrganHtmlReport report = new (\"reports/TrganReport.html\");\n</code></pre>"},{"location":"documentation/tutorial/#organize-with-containers-and-tests","title":"Organize with Containers and Tests","text":"<p>You can create TrganContainer or TrganTest objects concurrently. For module-based reports, use containers to group related tests:</p> <pre><code>TrganContainer container = report.CreateContainer(name:\"Login Page Module\",categories:[\"login\"]);\n</code></pre> <p>Both TrganContainer and TrganTest accept an optional string[] categories parameter, which helps visualize tags in the Execution Status Table under the Category column.</p> <p>Create tests within a container: <pre><code>TrganTest test1 = container.CreateTest(name:\"Login in with valid credentials\");\nTrganTest test2 = container.CreateTest(name:\"Login in with invalid credentials\");\nTrganTest test3 = container.CreateTest(name:\"Login in with valid username\");\n</code></pre></p> <p>Update test status using: <pre><code>test.Pass();\ntest.Fail();\ntest.Skip();\ntest.Log(status);\n</code></pre> The status argument must be a value from the Status enum.</p>"},{"location":"documentation/tutorial/#add-steps-and-bdd-keywords","title":"Add Steps and BDD Keywords","text":"<p>You can add steps to a test to mark checkpoints or trace actions:</p> <pre><code>test1.AddStep(Status.PASS,\"Navigate to app\");\ntest1.AddStep(Status.PASS, \"Enter valid credentials\");\ntest1.AddStep(Status.PASS, \"Land on main page\");\n</code></pre> <p>For BDD-style reports, use Gherkin keywords:</p> <p><pre><code>test.AddStep(Status.PASS, GherkinKeyword.Given, \"Navigate to app\");\ntest.AddStep(Status.PASS, GherkinKeyword.When, \"Enter valid credentials\");\ntest.AddStep(Status.PASS, GherkinKeyword.Then,\"Land on main page\");\n</code></pre> The AddStep method also accepts an optional Screenshot</p> <p>View Example-3: Normal Test and BDD Test</p>"},{"location":"documentation/tutorial/#create-and-update-steps-separately","title":"Create and Update Steps Separately","text":"<p>You can split step creation and status updates:</p> <pre><code>TrganStep step = test1.CreateStep(\"Navigate to app\");\n// doing operations\nstep1.Pass();\n\nTrganStep step = test1.CreateStep(\"Enter valid credentials\");\n// doing operations\nstep2.Pass();\n\nTrganStep step = test1.CreateStep(\"Land on main page\");\n// doing operations\nstep3.Pass();\n</code></pre> <p>After all steps are completed, generate the report:</p> <pre><code>report.Generate();\n</code></pre> <p>View Example-1: container based report</p> <p>View Example-2: test based report</p>"},{"location":"documentation/tutorial/#adding-trace-logs-to-a-step","title":"Adding trace logs to a step","text":"<p>Trace logs act as sub-checkpoints within a step. Use Write() to log messages:</p> <pre><code>step.Write(\"entered username\");\nstep.Write(\"entered password\");\nstep.Write(\"clicked login\");\n</code></pre> <p>View Example-4: trace logs in step</p> <p>Each log includes a timestamp by default. The Write()method accepts:</p> <ul> <li> <p>A string message</p> </li> <li> <p>An optional Screenshot</p> </li> <li> <p>A bool timeStamp flag to disable timestamp</p> </li> </ul> <p>Valid Combinations <pre><code>step.Write(\"entered username\");\nstep.Write(screenshot);\nstep.Write(\"entered username\",timeStamp:false);\nstep.Write(screenshot,timeStamp:false);\nstep.Write(\"entered username\",screenshot);\nstep.Write(\"entered username\",screenshot,timeStamp:false);\n</code></pre></p> <p>Upcomings</p> <ul> <li>Screenshot attachments </li> <li>TrganTable</li> </ul>"},{"location":"documentation/cs-examples/examples/","title":"Csharp Examples","text":""},{"location":"documentation/cs-examples/examples/#example-1-container-based-report","title":"Example-1: Container Based Report","text":"<p>1 container with 3 tests <pre><code>// creating report obj\nTrganHtmlReport report = new (\"reports/ContainerBasedReport.html\");\n\n// creating container\nTrganContainer container = report.CreateContainer(name: \"Login Page Module\", categories:[\"login\"]);\n\n// creating Test 1\nTrganTest test1 = container.CreateTest(name: \"Login in with valid credentials\");\nDoingOperations();\ntest1.AddStep(Status.PASS, GherkinKeyword.Given, \"Navigate to app\");\nDoingOperations();\ntest1.AddStep(Status.PASS, GherkinKeyword.When, \"Enter valid credentials\");\nDoingOperations();\ntest1.AddStep(Status.PASS, GherkinKeyword.Then, \"Land on main page\");\n\n// creating Test 2\nTrganTest test2 = container.CreateTest(name: \"Login in with invalid credentials\");\nDoingOperations();\ntest2.AddStep(Status.PASS, GherkinKeyword.Given, \"Navigate to app\");\nDoingOperations();\ntest2.AddStep(Status.PASS, GherkinKeyword.When, \"Enter invalid credentials\");\nDoingOperations();\ntest2.AddStep(Status.PASS, GherkinKeyword.Then, \"Fail to land on main page\");\n\n// creating Test 3\nTrganTest test3 = container.CreateTest(name: \"Login in with valid username\");\nDoingOperations();\ntest3.AddStep(Status.PASS, GherkinKeyword.Given, \"Navigate to app\");\nDoingOperations();\ntest3.AddStep(Status.PASS, GherkinKeyword.When, \"Enter valid username and invalid password\");\nDoingOperations();\ntest3.AddStep(Status.PASS, GherkinKeyword.Then, \"Fail to land on main page\");\n\n// generating report\nreport.Generate();\n</code></pre></p> <p>   View Output File \u2191 </p>"},{"location":"documentation/cs-examples/examples/#example-2-test-based-report","title":"Example-2: Test Based Report","text":"<pre><code>// creating report obj\nTrganHtmlReport report = new(\"reports/TestBasedReport.html\");\n\n// creating Test 1\nTrganTest test1 = report.CreateTest(testName: \"Login in with valid credentials\", categories: [\"Login\"]);\nDoingOperations();\ntest1.AddStep(Status.PASS, \"Navigate to app\");\nDoingOperations();\ntest1.AddStep(Status.PASS, GherkinKeyword.When, \"Enter valid credentials\");\nDoingOperations();\ntest1.AddStep(Status.PASS, GherkinKeyword.Then, \"Land on main page\");\n\n// creating Test 2\nTrganTest test2 = report.CreateTest(testName: \"Login in with invalid credentials\", categories: [\"Login\"]);\nDoingOperations();\ntest2.AddStep(Status.PASS, GherkinKeyword.Given, \"Navigate to app\");\nDoingOperations();\ntest2.AddStep(Status.PASS, GherkinKeyword.When, \"Enter invalid credentials\");\nDoingOperations();\ntest2.AddStep(Status.PASS, GherkinKeyword.Then, \"Failed to land on main page\");\n\n// creating Test 3\nTrganTest test3 = report.CreateTest(testName: \"Login in with valid username\", categories: [\"Login\"]);\nDoingOperations();\ntest3.AddStep(Status.PASS, GherkinKeyword.Given, \"Navigate to app\");\nDoingOperations();\ntest3.AddStep(Status.PASS, GherkinKeyword.When, \"Enter valid username and invalid password\");\nDoingOperations();\ntest3.AddStep(Status.PASS, GherkinKeyword.Then, \"Failed to land on main page\");\n\n// generating report\nreport.Generate();\n</code></pre> <p>   View Output File \u2191 </p>"},{"location":"documentation/cs-examples/examples/#example-3-normal-and-gherkin-test","title":"Example-3: Normal and Gherkin Test","text":"<p><pre><code>TrganHtmlReport report = new(\"reports/NormalAndGherkinTests.html\");\n\n// creating a normal test\nTrganTest test1 = report.CreateTest(testName: \"Normal Test\", categories: [\"TDD\"]);\n\nDoingOperations();\ntest1.AddStep(Status.PASS, \"Navigate to app\");\n\nDoingOperations();\ntest1.AddStep(Status.PASS, \"Enter valid credentials\");\n\nDoingOperations();\ntest1.AddStep(Status.PASS, \"Land on main page\");\n\n// creating a bdd styled test\nTrganTest test2 = report.CreateTest(testName: \"Gherkin Test\", categories: [\"BDD\"]);\n\nDoingOperations();\ntest2.AddStep(Status.PASS, GherkinKeyword.Given, \"Navigate to app\");\n\nDoingOperations();\ntest2.AddStep(Status.PASS, GherkinKeyword.When, \"Enter invalid credentials\");\n\nDoingOperations();\ntest2.AddStep(Status.PASS, GherkinKeyword.Then, \"Failed to land on main page\");\n\nreport.Generate();\n</code></pre>    View Output File \u2191 </p>"},{"location":"documentation/cs-examples/examples/#example-4-trace-logs-in-step","title":"Example-4: Trace Logs in step","text":"<p><pre><code>TrganHtmlReport report = new(\"reports/Container_Tracelog_DescAndStamp.html\");\nTrganContainer container = report.CreateContainer(\"Login Module\", categories: [\"Regression\"]);\nTrganTest test = container.CreateTest(name: \"Gherkin Test\");\n\nTrganStep step1 = test.CreateStep(GherkinKeyword.Given, \"Navigate to app\");\n\nLaunchApp();\nstep1.Write(\"navigated to application\");\nViewLoginPage();\nstep1.Write(\"able to see login page\");\nstep1.Pass();\n\nTrganStep step2 = test.CreateStep(GherkinKeyword.When, \"Enter invalid credentials\");\n\nEnterUserName();\nstep2.Write(\"entered username\");\nEnterPassword();\nstep2.Write(\"entered password\");\nClickLogin();\nstep2.Write(\"clicked login\");\nstep2.Pass();\n\nTrganStep step3 = test.CreateStep(GherkinKeyword.Then, \"Failed to land on main page\");\n\nViewInvalidWarning();\nstep3.Write(\"invalid credentials warning appeared\");\nCheckCurrentPage();\nstep3.Write(\"main page not visible\");\nstep3.Pass();\n\nreport.Generate();\n</code></pre>    View Output File \u2191 </p>"}]}